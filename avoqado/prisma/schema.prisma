generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id     Int      @id @default(autoincrement())
  name   String
  logo   String
  email  String
  phone  Int
  Branch Branch[]
}

model Branch {
  id              Int        @id @default(autoincrement())
  name            String
  ppt_image       String
  email           String
  phone           Int?
  city            String
  address         String
  extraAddress    String
  rating          Float
  rating_quantity Int
  cuisine         String
  restaurantId    Int
  breakfast       Int?
  dinner          Int?
  lunch           Int?
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id])
  Menu            Menu[]
  Table           Table[]
}

model Table {
  id                String  @id @default(uuid())
  table_number      Int
  order_in_progress Boolean
  branchId          Int
  branch            Branch  @relation(fields: [branchId], references: [id])
  Order             Order[]
}

model Menu {
  id             Int              @id @default(autoincrement())
  name           String?
  branchId       Int
  branch         Branch           @relation(fields: [branchId], references: [id])
  MenuCategories MenuCategories[]
}

model MenuCategories {
  id       Int        @id @default(autoincrement())
  name     String
  menuId   Int
  menu     Menu       @relation(fields: [menuId], references: [id])
  MenuItem MenuItem[]
}

model MenuItem {
  id               Int             @id @default(autoincrement())
  image            String
  name             String
  description      String
  price            Float
  available        Boolean
  menuCategoriesId Int?
  menuCategories   MenuCategories? @relation(fields: [menuCategoriesId], references: [id])
  MenuItemExtra    MenuItemExtra[]
  OrderItem        OrderItem[]
}

model MenuItemExtra {
  id             Int              @id @default(autoincrement())
  image          String
  name           String
  description    String
  price          Float
  available      Boolean
  menuItemId     Int?
  MenuItem       MenuItem?        @relation(fields: [menuItemId], references: [id])
  OrderItemExtra OrderItemExtra[]
}

model Order {
  id           Int         @id @default(autoincrement())
  creationDate DateTime
  orderedDate  DateTime
  tableId      String?
  tip          Decimal?
  paid         Boolean
  total        Decimal?
  Table        Table?      @relation(fields: [tableId], references: [id])
  OrderItem    OrderItem[]
  User         User[]
}

model OrderItem {
  id             Int              @id @default(autoincrement())
  price          Float
  quantity       Int
  menuItemId     Int?
  orderId        Int?
  MenuItem       MenuItem?        @relation(fields: [menuItemId], references: [id])
  Order          Order?           @relation(fields: [orderId], references: [id])
  OrderItemExtra OrderItemExtra[]
}

model OrderItemExtra {
  id              Int            @id @default(autoincrement())
  quantity        Int
  menuItemExtraId Int?
  orderItemId     Int?
  comment         String?
  MenuItemExtra   MenuItemExtra? @relation(fields: [menuItemExtraId], references: [id])
  OrderItem       OrderItem?     @relation(fields: [orderItemId], references: [id])
}

model User {
  id      String  @id @default(uuid())
  email   String?
  total   Float?
  orderId Int?
  Order   Order?  @relation(fields: [orderId], references: [id])
}
